@InBook{FromArtistry,
	author={Roden, Timothy and Parberry, Ian},
	editor={Rauterberg, Matthias},
	edition={1},
	title={From Artistry to Automation: A Structured Methodology for Procedural Content Creation},
	booktitle={Entertainment Computing -- ICEC 2004},
	year={2004},
	month={9},
	version={1.0},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={151--156},
	isbn={978-3-540-28643-1}
}

@article{Hendrikx,
  author = {Mark Hendrikx and Sebastiaan Meijer and Joeri Van Der Velden and Alexandru Iosup},
  journal = {ACM Transactions on Multimedia Computing, Communications, and Applications},
  title = {Procedural content generation for games},
  year = {2013},
  pages = {1-22},
  volume = {9},
  number = {1},
  ISSN = {1551-6857},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1145/2422956.2422957},
  URL = {https://dl.acm.org/doi/10.1145/2422956.2422957}
}

@article{liuDeep,
  author = {Jialin Liu and Sam Snodgrass and Ahmed Khalifa and Sebastian Risi and Georgios N. Yannakakis and Julian Togelius},
  journal = {Neural Computing and Applications},
  title = {Deep learning for procedural content generation},
  year = {2021},
  pages = {19-37},
  volume = {33},
  number = {1},
  ISSN = {0941-0643},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1007/s00521-020-05383-8},
  URL = {https://link.springer.com/10.1007/s00521-020-05383-8}
}

@PhdThesis{madoc59000,
        language = {English},
         author = {Jonas Freiknecht},
         address = {Mannheim},
	School={Universität Mannheim},
         year = {2021},
        title = {Procedural content generation for games},
       	url = {https://madoc.bib.uni-mannheim.de/59000/},
        keywords = {Prozedurale Generierung , virtuelle Welten , serious games}
}

@Article{Dhariwal2020JukeboxAG,
       author = {{Dhariwal}, Prafulla and {Jun}, Heewoo and {Payne}, Christine and {Kim}, Jong Wook and {Radford}, Alec and {Sutskever}, Ilya},
        title = "{Jukebox: A Generative Model for Music}",
      journal = {arXiv e-prints},
     keywords = {Electrical Engineering and Systems Science - Audio and Speech Processing, Computer Science - Machine Learning, Computer Science - Sound, Statistics - Machine Learning},
         year = 2020,
        month = apr,
          eid = {arXiv:2005.00341},
        pages = {arXiv:2005.00341},
          doi = {10.48550/arXiv.2005.00341},
archivePrefix = {arXiv},
       eprint = {2005.00341},
 primaryClass = {eess.AS},
       adsurl = {https://ui.adsabs.harvard.edu/abs/2020arXiv200500341D},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@inproceedings{ArticleCellular,
  author = {Lawrence Johnson and Georgios N. Yannakakis and Julian Togelius},
  booktitle = {Proceedings of the 2010 Workshop on Procedural Content Generation in Games},
  title = {Cellular automata for real-time generation of infinite cave levels},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {2010-06-18},
  pages = {1-4},
  isbn = {9781450300230},
  urldate = {2024-05-06},
  doi = {10.1145/1814256.1814266},
  url = {https://dl.acm.org/doi/10.1145/1814256.1814266}
}

@article{Gong2017,
  author = {Yimin Gong},
  journal = {IOP Conference Series: Materials Science and Engineering},
  title = {A survey on the modeling and applications of cellular automata theory},
  year = {2017-09-01},
  volume = {242},
  issn = {1757-8981},
  urldate = {2024-05-06},
  doi = {10.1088/1757-899X/242/1/012106},
  url = {https://iopscience.iop.org/article/10.1088/1757-899X/242/1/012106}
}

@InProceedings {inproceedings,
  author= {Smelik, Ruben M. and Kraker, Klaas Jan de  and Groenewegen, Saskia A. and Tutenel, Tim and Bidarra, Rafael},
  title={A survey of procedural methods for terrain modelling},
  booktitle={Proceedings of the CASA'09 Workshop on 3D Advanced Media in Gaming and Simulation},
  pages={25--34},
  month={jun},
  year={2009},
  address={Amsterdam, The Netherlands},
  url={http://graphics.tudelft.nl/Publications-new/2009/SDGTB09a}
}

@article{Miller19860831,
  author = {Gavin S P Miller},
  journal = {ACM SIGGRAPH Computer Graphics},
  title = {The definition and rendering of terrain maps},
  year = {1986-08-31},
  pages = {39-48},
  volume = {20},
  number = {4},
  ISSN = {0097-8930},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1145/15886.15890},
  URL = {https://dl.acm.org/doi/10.1145/15886.15890}
}

@article{nilson2007game,
	title={Game Engine Architecture},
	author={Nilson, Bj{\"o}rn and S{\"o}derberg, Martin},
	journal={M{\"a}lardalen University},
	year={2007}
}

@phdthesis{wolfe2009make2,
  title={Make2: A Comparative Analysis of Game Engines for Independent Game Developers},
  author={Wolfe, Dan},
  year={2009},
  school={Indiana University, Department of Telecommunications},
 language={English}
}

@inproceedings{vohera2021game,
  author = {Chaitya Vohera and Heet Chheda and Dhruveel Chouhan and Ayush Desai and Vijal Jain},
  booktitle = {2021 12th International Conference on Computing Communication and Networking Technologies (ICCCNT)},
  title = {Game Engine Architecture and Comparative Study of Different Game Engines},
  publisher = {IEEE},
  address = {Kharagpur},
  year = {2021-7-6},
  pages = {1-6},
  isbn = {978-1-7281-8595-8},
  urldate = {2024-05-06},
  doi = {10.1109/ICCCNT51525.2021.9579618},
  url = {https://ieeexplore.ieee.org/document/9579618/}
}

@article{inverseL-systems,
  author = {Jianwei Guo and Haiyong Jiang and Bedrich Benes and Oliver Deussen and Xiaopeng Zhang and Dani Lischinski and Hui Huang},
  journal = {ACM Transactions on Graphics},
  title = {Inverse Procedural Modeling of Branching Structures by Inferring L-Systems},
  year = {2020-10-31},
  pages = {1-13},
  volume = {39},
  number = {5},
  issn = {0730-0301},
  urldate = {2024-05-06},
  doi = {10.1145/3394105},
  url = {https://dl.acm.org/doi/10.1145/3394105}
}

@inproceedings{prusinkiewicz1986graphical,
  title={Graphical applications of L-systems},
  author={Prusinkiewicz, Przemyslaw},
  booktitle={Proceedings of graphics interface},
  volume={86},
  number={86},
  pages={247--253},
  year={1986}
}

@book{prusinkiewicz2012algorithmic,
  author = {Przemyslaw Prusinkiewicz and Aristid Lindenmayer},
  title = {The Algorithmic Beauty of Plants},
  publisher = {Springer New York},
  address = {New York, NY},
  year = {1990},
  isbn = {978-0-387-94676-4},
  urldate = {2024-05-06},
  doi = {10.1007/978-1-4613-8476-2},
  url = {https://books.google.cz/books?id=4F7lBwAAQBAJ&dq=The+algorithmic+beauty+of+plants}
}

@article{lindenmayer1968mathematical,
  author = {Aristid Lindenmayer},
  journal = {Journal of Theoretical Biology},
  title = {Mathematical models for cellular interactions in development I. Filaments with one-sided inputs},
  year = {1968},
  pages = {280-299},
  volume = {18},
  number = {3},
  issn = {00225193},
  urldate = {2024-05-06},
  doi = {10.1016/0022-5193(68)90079-9},
  url = {https://linkinghub.elsevier.com/retrieve/pii/0022519368900799}
}


@inproceedings{PrusinkiewiczModelsOfPlants,
    author = {M\v{e}ch, Radom\'{\i}r and Prusinkiewicz, Przemyslaw},
    title = {Visual models of plants interacting with their environment},
    year = {1996},
    isbn = {0897917464},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/237170.237279},
    doi = {10.1145/237170.237279},
    booktitle = {Proceedings of the 23rd Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {397–410},
    numpages = {14},
    keywords = {L-system, clonal plant, ecosystem, modeling, plant development, realistic image synthesis, root, scientific visualization, simulation, software design, tree},
    series = {SIGGRAPH '96}
}

@inproceedings{syntheticTopiary,
    author = {Prusinkiewicz, Przemyslaw and James, Mark and M\v{e}ch, Radom\'{\i}r},
    title = {Synthetic topiary},
    year = {1994},
    isbn = {0897916670},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/192161.192254},
    doi = {10.1145/192161.192254},
    abstract = {The paper extends Lindenmayer systems in a manner suitable for simulating the interaction between a developing plant and its environment. The formalism is illustrated by modeling the response of trees to pruning, which yields synthetic images of sculptured plants found in topiary gardens.},
    booktitle = {Proceedings of the 21st Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {351–358},
    numpages = {8},
    keywords = {topiary, modeling of plants, image synthesis, L-system},
    series = {SIGGRAPH '94}
}

@inproceedings{animationOfPlantDevelopment.,
    author = {Prusinkiewicz, Przemyslaw and Hammel, Mark S. and Mjolsness, Eric},
    title = {Animation of plant development},
    year = {1993},
    isbn = {0897916018},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/166117.166161},
    doi = {10.1145/166117.166161},
    booktitle = {Proceedings of the 20th Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {351–360},
    numpages = {10},
    keywords = {L-system, animation through simulation, combined discrete/continuous simulation, modeling of plants, piecewise-continuous differential equation, realistic image synthesis},
    location = {Anaheim, CA},
    series = {SIGGRAPH '93}
}

@misc{newlands2022procedural,
      title={Procedural Generation and Rendering of Realistic, Navigable Forest Environments: An Open-Source Tool}, 
      author={Callum Newlands and Klaus-Peter Zauner},
      year={2022},
      eprint={2208.01471},
      archivePrefix={arXiv},
      primaryClass={cs.GR}
}

@inproceedings{Benes02ICCVG,
  title = {A stable modeling of large plant ecosystems},
  author = {Bene{\v{s}}, Bedrich},
  year = {2002},
  booktitle = {Proceedings of the International Conference on Computer Vision and Graphics},
  pages = {94--101},
  image = {Benes-2002-A_stable_modeling_of_large_plant_ecosystems-thumbnail.png},
  pdf = {Benes-2002-A_stable_modeling_of_large_plant_ecosystems.pdf}
}
     
@article{PerlinKen,
    author = {Perlin, Ken},
    title = {An image synthesizer},
    year = {1985},
    issue_date = {Jul. 1985},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {19},
    number = {3},
    issn = {0097-8930},
    url = {https://doi.org/10.1145/325165.325247},
    doi = {10.1145/325165.325247},
    abstract = {We introduce the concept of a Pixel Stream Editor. This forms the basis for an interactive synthesizer for designing highly realistic Computer Generated Imagery. The designer works in an interactive Very High Level programming environment which provides a very fast concept/implement/view iteration cycle.Naturalistic visual complexity is built up by composition of non-linear functions, as opposed to the more conventional texture mapping or growth model algorithms. Powerful primitives are included for creating controlled stochastic effects. We introduce the concept of "solid texture" to the field of CGI.We have used this system to create very convincing representations of clouds, fire, water, stars, marble, wood, rock, soap films and crystal. The algorithms created with this paradigm are generally extremely fast, highly realistic, and asynchronously parallelizable at the pixel level.},
    journal = {SIGGRAPH Comput. Graph.},
    month = {jul},
    pages = {287–296},
    numpages = {10},
    keywords = {waves, turbulence, stochastic modelling, space function, solid texture, pixel stream editor, interactive, functional composition, fire, algorithm development}
}

@article{engines,
  author = {A. Andrade},
  journal = {EAI Endorsed Transactions on Game-Based Learning},
  title = {Game engines},
  subtitle = {a survey},
  year = {2015-11-05},
  pages = {10.4108/eai.5-11-2015.150615},
  volume = {2},
  number = {6},
  issn = {2034-8800},
  urldate = {2024-05-06},
  doi = {10.4108/eai.5-11-2015.150615},
  url = {http://eudl.eu/doi/10.4108/eai.5-11-2015.150615}
}

@article{Perlin2002,
  author = {Ken Perlin},
  journal = {ACM Transactions on Graphics},
  title = {Improving noise},
  year = {2002},
  pages = {681-682},
  volume = {21},
  number = {3},
  issn = {0730-0301},
  urldate = {2024-05-06},
  doi = {10.1145/566654.566636},
  url = {https://dl.acm.org/doi/10.1145/566654.566636}
}


@inproceedings{Lewis89,
author = {Lewis, J. P.},
title = {Algorithms for solid noise synthesis},
year = {1989},
isbn = {0897913124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/74333.74360},
doi = {10.1145/74333.74360},
abstract = {A solid noise is a function that defines a random value at each point in space. Solid noises have immediate and powerful applications in surface texturing, stochastic modeling, and the animation of natural phenomena.Existing solid noise synthesis algorithms are surveyed and two new algorithms are presented. The first uses Wiener interpolation to interpolate random values on a discrete lattice. The second is an efficient sparse convolution algorithm. Both algorithms are developed for model-directed synthesis, in which sampling and construction of the noise occur only at points where the noise value is required, rather than over a regularly sampled region of space. The paper attempts to present the rationale for the selection of these particular algorithms.The new algorithms have advantages of efficiency, improved control over the noise power spectrum, and the absence of artifacts. The convolution algorithm additionally allows quality to be traded for efficiency without introducing obvious deterministic effects. The algorithms are particularly suitable for applications where high-quality solid noises are required. Several sample applications in stochastic modeling and solid texturing are shown.},
booktitle = {Proceedings of the 16th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {263–270},
numpages = {8},
series = {SIGGRAPH '89}
}


@article{Cook05,
author = {Cook, Robert L. and DeRose, Tony},
title = {Wavelet noise},
year = {2005},
issue_date = {July 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1073204.1073264},
doi = {10.1145/1073204.1073264},
abstract = {Noise functions are an essential building block for writing procedural shaders in 3D computer graphics. The original noise function introduced by Ken Perlin is still the most popular because it is simple and fast, and many spectacular images have been made with it. Nevertheless, it is prone to problems with aliasing and detail loss. In this paper we analyze these problems and show that they are particularly severe when 3D noise is used to texture a 2D surface. We use the theory of wavelets to create a new class of simple and fast noise functions that avoid these problems.},
journal = {ACM Trans. Graph.},
month = {jul},
pages = {803–811},
numpages = {9},
keywords = {wavelets, texturing, texture synthesis, shading, rendering, procedural textures, noise, multiresolution analysis}
}

@article{Goldberg08,
author = {Goldberg, Alexander and Zwicker, Matthias and Durand, Fr\'{e}do},
title = {Anisotropic noise},
year = {2008},
issue_date = {August 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1360612.1360653},
doi = {10.1145/1360612.1360653},
abstract = {Programmable graphics hardware makes it possible to generate procedural noise textures on the fly for interactive rendering. However, filtering and antialiasing procedural noise involves a tradeoff between aliasing artifacts and loss of detail. In this paper we present a technique, targeted at interactive applications, that provides high-quality anisotropic filtering for noise textures. We generate noise tiles directly in the frequency domain by partitioning the frequency domain into oriented subbands. We then compute weighted sums of the subband textures to accurately approximate noise with a desired spectrum. This allows us to achieve high-quality anisotropic filtering. Our approach is based solely on 2D textures, avoiding the memory overhead of techniques based on 3D noise tiles. We devise a technique to compensate for texture distortions to generate uniform noise on arbitrary meshes. We develop a GPU-based implementation of our technique that achieves similar rendering performance as state-of-the-art algorithms for procedural noise. In addition, it provides anisotropic filtering and achieves superior image quality.},
journal = {ACM Trans. Graph.},
month = {aug},
pages = {1–8},
numpages = {8}
}

@inproceedings{Kensler2008,
  title={1 Better Gradient Noise},
  author={Andrew E. Kensler},
  year={2008},
  url={https://api.semanticscholar.org/CorpusID:15788995}
}

@article{Lagae09,
author = {Lagae, Ares and Lefebvre, Sylvain and Drettakis, George and Dutr\'{e}, Philip},
title = {Procedural noise using sparse Gabor convolution},
year = {2009},
issue_date = {August 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1531326.1531360},
doi = {10.1145/1531326.1531360},
abstract = {Noise is an essential tool for texturing and modeling. Designing interesting textures with noise calls for accurate spectral control, since noise is best described in terms of spectral content. Texturing requires that noise can be easily mapped to a surface, while high-quality rendering requires anisotropic filtering. A noise function that is procedural and fast to evaluate offers several additional advantages. Unfortunately, no existing noise combines all of these properties.In this paper we introduce a noise based on sparse convolution and the Gabor kernel that enables all of these properties. Our noise offers accurate spectral control with intuitive parameters such as orientation, principal frequency and bandwidth. Our noise supports two-dimensional and solid noise, but we also introduce setup-free surface noise. This is a method for mapping noise onto a surface, complementary to solid noise, that maintains the appearance of the noise pattern along the object and does not require a texture parameterization. Our approach requires only a few bytes of storage, does not use discretely sampled data, and is nonperiodic. It supports anisotropy and anisotropic filtering. We demonstrate our noise using an interactive tool for noise design.},
journal = {ACM Trans. Graph.},
month = {jul},
articleno = {54},
numpages = {10},
keywords = {shading, rendering, procedural texture, noise}
}

@article{Lagae10,
  author = {A. Lagae and S. Lefebvre and R. Cook and T. DeRose and G. Drettakis and D.S. Ebert and J.P. Lewis and K. Perlin and M. Zwicker},
  journal = {Computer Graphics Forum},
  title = {A Survey of Procedural Noise Functions},
  year = {2010},
  pages = {2579-2600},
  volume = {29},
  number = {8},
  issn = {0167-7055},
  urldate = {2024-05-06},
  doi = {10.1111/j.1467-8659.2010.01827.x},
  url = {https://onlinelibrary.wiley.com/doi/10.1111/j.1467-8659.2010.01827.x}
}

@inproceedings{heightMap08,
  author = {Paulo Santos and Rodrigo de Toledo and Marcelo Gattass},
  booktitle = {Proceedings of the 2008 ACM symposium on Solid and physical modeling},
  title = {Solid height-map sets},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {2008-06-02},
  pages = {359-365},
  isbn = {9781605581064},
  urldate = {2024-05-06},
  doi = {10.1145/1364901.1364953},
  url = {https://dl.acm.org/doi/10.1145/1364901.1364953}
}

@inproceedings{Gamito2001ProceduralLW,
  title={Procedural Landscapes with Overhangs},
  author={Manuel N. Gamito},
  year={2001},
  url={https://api.semanticscholar.org/CorpusID:18543187}
}

@article{Peytavie09,
  author = {A. Peytavie and E. Galin and J. Grosjean and S. Merillou},
  journal = {Computer Graphics Forum},
  title = {Arches},
  subtitle = {a Framework for Modeling Complex Terrains},
  year = {2009},
  pages = {457-467},
  volume = {28},
  number = {2},
  ISSN = {0167-7055},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1111/j.1467-8659.2009.01385.x},
  URL = {https://onlinelibrary.wiley.com/doi/10.1111/j.1467-8659.2009.01385.x}
}

@inproceedings{hart1999antialiased,
  title={Antialiased parameterized solid texturing simplified for consumer-level hardware implementation},
  author={Hart, John C and Carr, Nate and Kameya, Masaki and Tibbitts, Stephen A and Coleman, Terrance J},
  booktitle={Proceedings of the ACM SIGGRAPH/EUROGRAPHICS workshop on Graphics hardware},
  pages={45--53},
  year={1999}
}

@inproceedings{hart01,
  author = {John C. Hart},
  booktitle = {Proceedings of the ACM SIGGRAPH/EUROGRAPHICS workshop on Graphics hardware},
  title = {Perlin noise pixel shaders},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {2001},
  pages = {87-94},
  isbn = {158113407X},
  urldate = {2024-05-06},
  doi = {10.1145/383507.383531},
  url = {https://dl.acm.org/doi/10.1145/383507.383531}
}

@inproceedings{ola05,
author = {Olano, Marc},
title = {Modified noise for evaluation on graphics hardware},
year = {2005},
isbn = {1595930868},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1071866.1071883},
doi = {10.1145/1071866.1071883},
abstract = {Perlin noise is one of the primary tools responsible for the success of procedural shading in production rendering. It breaks the crisp computer generated look by adding apparent randomness that is controllable and repeatable. Both Perlin's original noise algorithm and his later improved noise were designed to run efficiently on a CPU. These algorithms do not map as well to the design and resource limits of the typical GPU. We propose two modifications to Perlin's improved noise that make it much more suitable for GPU implementation, allowing faster direct computation. The modified noise can be totally evaluated on the GPU without resorting to texture accesses or "baked" into a texture with consistent appearance between textured and computed noise. However, it is most useful for 3D and 4D noise, which cannot easily be stored in reasonably-sized textures. We present one implementation of our modified noise using computation or direct texturing for 1D and 2D noise, and a procedural combination of 2D textures for the 3D noise.},
booktitle = {Proceedings of the ACM SIGGRAPH/EUROGRAPHICS Conference on Graphics Hardware},
pages = {105–110},
numpages = {6},
location = {Los Angeles, California},
series = {HWWS '05}
}

@article{10.1145/358523.358553,
author = {Fournier, Alain and Fussell, Don and Carpenter, Loren},
title = {Computer rendering of stochastic models},
year = {1982},
issue_date = {June 1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {6},
issn = {0001-0782},
url = {https://doi.org/10.1145/358523.358553},
doi = {10.1145/358523.358553},
abstract = {A recurrent problem in generating realistic pictures by computers is to represent natural irregular objects and phenomena without undue time or space overhead. We develop a new and powerful solution to this computer graphics problem by modeling objects as sample paths of stochastic processes. Of particular interest are those stochastic processes which previously have been found to be useful models of the natural phenomena to be represented. One such model applicable to the representation of terrains, known as “fractional Brownian motion,” has been developed by Mandelbrot.The value of a new approach to object modeling in computer graphics depends largely on the efficiency of the techniques used to implement the model. We introduce a new algorithm that computes a realistic, visually satisfactory approximation to fractional Brownian motion in faster time than with exact calculations. A major advantage of this technique is that it allows us to compute the surface to arbitrary levels of details without increasing the database. Thus objects with complex appearances can be displayed from a very small database. The character of the surface can be controlled by merely modifying a few parameters. A similar change allows complex motion to be created inexpensively.},
journal = {Commun. ACM},
month = {jun},
pages = {371–384},
numpages = {14},
keywords = {terrain models, stochastic models, fractals}
}

@inbook{Fournier98,
author = {Fournier, Alain and Fussell, Don and Carpenter, Loren},
title = {Computer rendering of stochastic models},
year = {1998},
isbn = {158113052X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/280811.280993},
abstract = {A recurrent problem in generating realistic pictures by computers is to represent natural irregular objects and phenomena without undue time or space overhead. We develop a new and powerful solution to this computer graphics problem by modeling objects as sample paths of stochastic processes. Of particular interest are those stochastic processes which previously have been found to be useful models of the natural phenomena to be represented. One such model applicable to the representation of terrains, known as “fractional Brownian motion,” has been developed by Mandelbrot.The value of a new approach to object modeling in computer graphics depends largely on the efficiency of the techniques used to implement the model. We introduce a new algorithm that computes a realistic, visually satisfactory approximation to fractional Brownian motion in faster time than with exact calculations. A major advantage of this technique is that it allows us to compute the surface to arbitrary levels of details without increasing the database. Thus objects with complex appearances can be displayed from a very small database. The character of the surface can be controlled by merely modifying a few parameters. A similar change allows complex motion to be created inexpensively.},
booktitle = {Seminal Graphics: Pioneering Efforts That Shaped the Field, Volume 1},
pages = {189–202},
numpages = {14}
}

@inproceedings{Lewis86,
author = {Lewis, J P},
title = {Methods for stochastic spectral synthesis},
year = {1986},
publisher = {Canadian Information Processing Society},
address = {CAN},
booktitle = {Proceedings on Graphics Interface '86/Vision Interface '86},
pages = {173–179},
numpages = {7},
location = {Vancouver, British Columbia, Canada}
}

@article{Lewis87,
author = {Lewis, J. P.},
title = {Generalized stochastic subdivision},
year = {1987},
issue_date = {July 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/35068.35069},
doi = {10.1145/35068.35069},
abstract = {Stochastic techniques have assumed a prominent role in computer graphics because of their success in modeling a variety of complex and natural phenomena. This paper describes the basis for techniques such as stochastic subdivision in the theory of random processes and estimation theory. The popular stochastic subdivision construction is then generalized to provide control of the autocorrelation and spectral properties of the synthesized random functions. The generalized construction is suitable for generating a variety of perceptually distinct high-quality random functions, including those with non-fractal spectra and directional or oscillatory characteristics. It is argued that a spectral modeling approach provides a more powerful and somewhat more intuitive perceptual characterization of random processes than does the fractal model. Synthetic textures and terrains are presented as a means of visually evaluating the generalized subdivision technique.},
journal = {ACM Trans. Graph.},
month = {jul},
pages = {167–190},
numpages = {24}
}

@inproceedings {Anjyo88,
booktitle = {EG 1988-Technical Papers},
editor = {},
title = {{A Simple Spectral Approach to Stochastic Modelling for Natural Objects}},
author = {Anjyo, Ken-ichi},
year = {1988},
publisher = {Eurographics Association},
ISSN = {1017-4656},
DOI = {10.2312/egtp.19881023}
}

@incollection{Saupe1988,
  author = {Dietmar Saupe},
  booktitle = {The Science of Fractal Images},
  title = {Algorithms for random fractals},
  publisher = {Springer New York},
  address = {New York, NY},
  year = {1988},
  edition = {1},
  pages = {71-136},
  ISBN = {978-1-4612-8349-2},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1007/978-1-4612-3784-62},
  URL = {http://link.springer.com/10.1007/978-1-4612-3784-62}
}

@inproceedings{10.1145/800031.808605,
author = {Lewis, John-Peter},
title = {Texture synthesis for digital painting},
year = {1984},
isbn = {0897911385},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800031.808605},
doi = {10.1145/800031.808605},
abstract = {The problem of digital painting is considered from a signal processing viewpoint, and is reconsidered as a problem of directed texture synthesis. It is an important characteristic of natural texture that detail may be evident at many scales, and the detail at each scale may have distinct characteristics. A “sparse convolution” procedure for generating random textures with arbitrary spectral content is described. The capability of specifying the texture spectrum (and thus the amount of detail at each scale) is an improvement over stochastic texture synthesis processes which are scalebound or which have a prescribed 1/f spectrum. This spectral texture synthesis procedure provides the basis for a digital paint system which rivals the textural sophistication of traditional artistic media. Applications in terrain synthesis and texturing computer-rendered objects are also shown.},
booktitle = {Proceedings of the 11th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {245–252},
numpages = {8},
keywords = {Fractals, Painting, Terrain model, Texture synthesis},
series = {SIGGRAPH '84}
}

@article{montesinos2020,
  author       = {Dimas Mu{\~{n}}oz{-}Montesinos},
  title        = {Modern Methods for Text Generation},
  journal      = {CoRR},
  volume       = {abs/2009.04968},
  year         = {2020},
  url          = {https://arxiv.org/abs/2009.04968},
  eprinttype    = {arXiv},
  eprint       = {2009.04968},
  timestamp    = {Tue, 20 Apr 2021 14:21:10 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2009-04968.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Lewis84,
author = {Lewis, John-Peter},
title = {Texture synthesis for digital painting},
year = {1984},
issue_date = {July 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/964965.808605},
doi = {10.1145/964965.808605},
abstract = {The problem of digital painting is considered from a signal processing viewpoint, and is reconsidered as a problem of directed texture synthesis. It is an important characteristic of natural texture that detail may be evident at many scales, and the detail at each scale may have distinct characteristics. A “sparse convolution” procedure for generating random textures with arbitrary spectral content is described. The capability of specifying the texture spectrum (and thus the amount of detail at each scale) is an improvement over stochastic texture synthesis processes which are scalebound or which have a prescribed 1/f spectrum. This spectral texture synthesis procedure provides the basis for a digital paint system which rivals the textural sophistication of traditional artistic media. Applications in terrain synthesis and texturing computer-rendered objects are also shown.},
journal = {SIGGRAPH Comput. Graph.},
month = {jan},
pages = {245–252},
numpages = {8},
keywords = {Fractals, Painting, Terrain model, Texture synthesis}
}

@inproceedings{worley1996,
  author = {Steven Worley},
  booktitle = {Proceedings of the 23rd annual conference on Computer graphics and interactive techniques},
  title = {A cellular texture basis function},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {1996},
  pages = {291-294},
  isbn = {0897917464},
  urldate = {2024-05-06},
  doi = {10.1145/237170.237267},
  url = {https://dl.acm.org/doi/10.1145/237170.237267}
}

@inproceedings{10.1145/122718.122751,
author = {van Wijk, Jarke J.},
title = {Spot noise texture synthesis for data visualization},
year = {1991},
isbn = {0897914368},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/122718.122751},
doi = {10.1145/122718.122751},
abstract = {The use of stochastic texture for the visualization of scalar and vector fields over surfaces is discussed. Current techniques for texture synthesis are not suitable, because they do not provide local control, and are not suited for the design of textures. A new technique, spot noise, is presented that does provide these features. Spot noise is synthesized by addition of randomly weighted and positioned spots. Local control of the texture is realized by variation of the spot. The spot is a useful primitive for texture design, because, in general, the relations between features of the spot and features of the texture are straightforward. Various examples and applications are shown. Spot noise lends itself well for the synthesis of texture over curved surfaces, and is therefore an alternative to solid texturing. The relations of spot noise with a variety of other techniques, such as radom faults, filtering, sparse convolution, and particle systems, are discussed. It appears that spot noise provides a new perspective on those techniques.},
booktitle = {Proceedings of the 18th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {309–318},
numpages = {10},
keywords = {texture synthesis, scientific visualization, particle systems, fractals, flow visualization},
series = {SIGGRAPH '91}
}

@article{Wijk91,
author = {van Wijk, Jarke J.},
title = {Spot noise texture synthesis for data visualization},
year = {1991},
issue_date = {July 1991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {4},
issn = {0097-8930},
url = {https://doi.org/10.1145/127719.122751},
doi = {10.1145/127719.122751},
abstract = {The use of stochastic texture for the visualization of scalar and vector fields over surfaces is discussed. Current techniques for texture synthesis are not suitable, because they do not provide local control, and are not suited for the design of textures. A new technique, spot noise, is presented that does provide these features. Spot noise is synthesized by addition of randomly weighted and positioned spots. Local control of the texture is realized by variation of the spot. The spot is a useful primitive for texture design, because, in general, the relations between features of the spot and features of the texture are straightforward. Various examples and applications are shown. Spot noise lends itself well for the synthesis of texture over curved surfaces, and is therefore an alternative to solid texturing. The relations of spot noise with a variety of other techniques, such as radom faults, filtering, sparse convolution, and particle systems, are discussed. It appears that spot noise provides a new perspective on those techniques.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {309–318},
numpages = {10},
keywords = {texture synthesis, scientific visualization, particle systems, fractals, flow visualization}
}

@incollection{cheng2020automatic,
  author = {Darui Cheng and Honglei Han and Guangzheng Fei},
  booktitle = {Entertainment Computing – ICEC 2020},
  title = {Automatic Generation of Game Levels Based on Controllable Wave Function Collapse Algorithm},
  publisher = {Springer International Publishing},
  address = {Cham},
  year = {2020},
  pages = {37-50},
  ISBN = {978-3-030-65735-2},
  medium = {online},
  accessed = {2024-05-06},
  DOI = {10.1007/978-3-030-65736-93},
  URL = {https://link.springer.com/10.1007/978-3-030-65736-93}
}

@inproceedings{Hwanhee2019,
  author = {Hwanhee Kim and Seongtaek Lee and Hyundong Lee and Teasung Hahn and Shinjin Kang},
  booktitle = {2019 IEEE Conference on Games (CoG)},
  title = {Automatic Generation of Game Content using a Graph-based Wave Function Collapse Algorithm},
  publisher = {IEEE},
  address = {London},
  year = {2019},
  pages = {1-4},
  isbn = {978-1-7281-1884-0},
  urldate = {2024-05-06},
  doi = {10.1109/CIG.2019.8848019},
  url = {https://ieeexplore.ieee.org/document/8848019/}
}

