@BOOK{FromArtistry,
	author={Roden, Timothy and Parberry, Ian},
	editor={Rauterberg, Matthias},
	title={From Artistry to Automation: A Structured Methodology for Procedural Content Creation},
	booktitle={Entertainment Computing -- ICEC 2004},
	year={2004},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={151--156},
	isbn={978-3-540-28643-1}
}

@article{Hendrikx,
	author = {Hendrikx, Mark and Meijer, Sebastiaan and Van Der Velden, Joeri and Iosup, Alexandru},
	title = {Procedural Content Generation for Games: A Survey},
	year = {2013},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {9},
	number = {1},
	issn = {1551-6857},
	url = {https://doi.org/10.1145/2422956.2422957},
	doi = {10.1145/2422956.2422957},
	month = {feb},
	articleno = {1},
	numpages = {22},
	keywords = {Game content generation, procedural, survey}
}

@article{liuDeep,
	title = {Deep learning for procedural content generation},
	volume = {33},
	issn = {1433-3058},
	url = {https://doi.org/10.1007/s00521-020-05383-8},
	doi = {10.1007/s00521-020-05383-8},
	number = {1},
	journal = {Neural Computing and Applications},
	author = {Liu, Jialin and Snodgrass, Sam and Khalifa, Ahmed and Risi, Sebastian and Yannakakis, Georgios N. and Togelius, Julian},
	month = {jan},
	year = {2021},
	pages = {19--37}
}

@phdthesis{madoc59000,
        language = {English},
         author = {Jonas Freiknecht},
         address = {Mannheim},
         year = {2021},
        title = {Procedural content generation for games},
       	url = {https://madoc.bib.uni-mannheim.de/59000/},
        keywords = {Prozedurale Generierung , virtuelle Welten , serious games}
}

@article{Dhariwal2020JukeboxAG,
 	title={Jukebox: A Generative Model for Music},	
	author={Prafulla Dhariwal and Heewoo Jun and Christine Payne and Jong Wook Kim and Alec Radford and Ilya Sutskever},
	journal={ArXiv},
	year={2020},
	volume={abs/2005.00341},
	url={https://api.semanticscholar.org/CorpusID:218470180}
}

@article{articleCellular,
	author = {Johnson, Lawrence and Yannakakis, Georgios and Togelius, Julian},
	year = {2010},
	month = {09},
	pages = {},
	title = {Cellular automata for real-time generation of},
	doi = {10.1145/1814256.1814266}
}

@article{Gong2017,
	doi = {10.1088/1757-899X/242/1/012106},
	url = {https://dx.doi.org/10.1088/1757-899X/242/1/012106},
	year = {2017},
	month = {sep},
	publisher = {IOP Publishing},
	volume = {242},
	number = {1},
	pages = {012106},
	author = {Yimin Gong},
	title = {A survey on the modeling and applications of cellular automata theory},
	journal = {IOP Conference Series: Materials Science and Engineering}
}

@inproceedings{inproceedings,
	author = {Smelik, Ruben and de Kraker, Klaas Jan and Groenewegen, Saskia and Tutenel, Tim and Bidarra, Rafael},
	year = {2009},
	month = {06},
	pages = {},
	title = {A Survey of Procedural Methods for Terrain Modelling}
}

@article{MillerRendering,
	author = {Miller, Gavin S P},
	title = {The Definition and Rendering of Terrain Maps},
	year = {1986},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {20},
	number = {4},
	issn = {0097-8930},
	url = {https://doi.org/10.1145/15886.15890},
	doi = {10.1145/15886.15890},
	month = {aug},
	pages = {39-48},
	numpages = {10}
}

@article{nilson2007game,
  title={Game Engine Architecture},
  author={Nilson, Bj{\"o}rn and S{\"o}derberg, Martin},
  journal={M{\"a}lardalen University},
  year={2007}
}

@phdthesis{wolfe2009make2,
  title={Make2: A Comparative Analysis of Game Engines for Independent Game Developers},
  author={Wolfe, Dan},
  year={2009},
  school={Indiana University, Department of Telecommunications}
}

@inproceedings{vohera2021game,
  title={Game engine architecture and comparative study of different game engines},
  author={Vohera, Chaitya and Chheda, Heet and Chouhan, Dhruveel and Desai, Ayush and Jain, Vijal},
  booktitle={2021 12th International Conference on Computing Communication and Networking Technologies (ICCCNT)},
  pages={1--6},
  year={2021},
  organization={IEEE}
}

@misc{UnityPlans,
	title	= {Compare unity plans: Personal, pro, enterprise, industry},
	author={Unity Technologies},
	year 	={2024}
	note	={\url{https://unity.com/pricing/compare-plans} [Accessed: 2024]}
}

@article{inverseL-systems,
    author = {Guo, Jianwei and Jiang, Haiyong and Benes, Bedrich and Deussen, Oliver and Zhang, Xiaopeng and Lischinski, Dani and Huang, Hui},
    title = {Inverse Procedural Modeling of Branching Structures by Inferring L-Systems},
    year = {2020},
    issue_date = {October 2020},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {39},
    number = {5},
    issn = {0730-0301},
    url = {https://doi.org/10.1145/3394105},
    doi = {10.1145/3394105},
    abstract = {We introduce an inverse procedural modeling approach that learns L-system representations of pixel images with branching structures. Our fully automatic model generates a compact set of textual rewriting rules that describe the input. We use deep learning to discover atomic structures such as line segments or branchings. Orientation and scaling of these structures are determined and the detected structures are combined into a tree. The initial representation is analyzed, and repeating parts are encoded into a small grammar by using greedy optimization while the user can control the size of the detected rules. The output is an L-system that represents the input image as a simple text and a set of terminal symbols. We apply our approach to a variety of examples, demonstrate its robustness against noise and blur, and we show that it can detect user sketches and complex input structures.},
    journal = {ACM Trans. Graph.},
    month = {jun},
    articleno = {155},
    numpages = {13},
    keywords = {procedural generation, grammar induction, L-systems}
}

@article{LINDENMAYER1968280,
title = {Mathematical models for cellular interactions in development I. Filaments with one-sided inputs},
journal = {Journal of Theoretical Biology},
volume = {18},
number = {3},
pages = {280-299},
year = {1968},
issn = {0022-5193},
doi = {https://doi.org/10.1016/0022-5193(68)90079-9},
url = {https://www.sciencedirect.com/science/article/pii/0022519368900799},
author = {Aristid Lindenmayer},
abstract = {A theory is proposed for the development of filamentous organisms, based on the assumptions that the filaments are composed of cells which undergo changes of state under inputs they receive from their neighbors, and the cells produce outputs as determined by their state and the input they receive. Cell division is accounted for by inserting two new cells in the filament to replace a cell of a specified state and input. Thus growing filaments are obtained which exhibit various developmental patterns, like constant apical pattern, non-dividing apical zone, and banded patterns. In this first part of this study the inputs are considered to pass only in one direction along the filament. Formal set-theoretical statement of the assumptions, and of some of the theorems derivable from them, is included.}
}

@inproceedings{prusinkiewicz1986graphical,
  title={Graphical applications of L-systems},
  author={Prusinkiewicz, Przemyslaw},
  booktitle={Proceedings of graphics interface},
  volume={86},
  number={86},
  pages={247--253},
  year={1986}
}

@book{prusinkiewicz2012algorithmic,
  title={The algorithmic beauty of plants},
  author={Prusinkiewicz, Przemyslaw and Lindenmayer, Aristid},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@article{lindenmayer1968mathematical,
  title={Mathematical models for cellular interactions in development I. Filaments with one-sided inputs},
  author={Lindenmayer, Aristid},
  journal={Journal of theoretical biology},
  volume={18},
  number={3},
  pages={280--299},
  year={1968},
  publisher={Elsevier}
}

@inproceedings{PrusinkiewiczModelsOfPlants,
    author = {M\v{e}ch, Radom\'{\i}r and Prusinkiewicz, Przemyslaw},
    title = {Visual models of plants interacting with their environment},
    year = {1996},
    isbn = {0897917464},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/237170.237279},
    doi = {10.1145/237170.237279},
    booktitle = {Proceedings of the 23rd Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {397–410},
    numpages = {14},
    keywords = {L-system, clonal plant, ecosystem, modeling, plant development, realistic image synthesis, root, scientific visualization, simulation, software design, tree},
    series = {SIGGRAPH '96}
}

@inproceedings{syntheticTopiary,
    author = {Prusinkiewicz, Przemyslaw and James, Mark and M\v{e}ch, Radom\'{\i}r},
    title = {Synthetic topiary},
    year = {1994},
    isbn = {0897916670},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/192161.192254},
    doi = {10.1145/192161.192254},
    abstract = {The paper extends Lindenmayer systems in a manner suitable for simulating the interaction between a developing plant and its environment. The formalism is illustrated by modeling the response of trees to pruning, which yields synthetic images of sculptured plants found in topiary gardens.},
    booktitle = {Proceedings of the 21st Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {351–358},
    numpages = {8},
    keywords = {topiary, modeling of plants, image synthesis, L-system},
    series = {SIGGRAPH '94}
}

@inproceedings{animationOfPlantDevelopment.,
    author = {Prusinkiewicz, Przemyslaw and Hammel, Mark S. and Mjolsness, Eric},
    title = {Animation of plant development},
    year = {1993},
    isbn = {0897916018},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/166117.166161},
    doi = {10.1145/166117.166161},
    booktitle = {Proceedings of the 20th Annual Conference on Computer Graphics and Interactive Techniques},
    pages = {351–360},
    numpages = {10},
    keywords = {L-system, animation through simulation, combined discrete/continuous simulation, modeling of plants, piecewise-continuous differential equation, realistic image synthesis},
    location = {Anaheim, CA},
    series = {SIGGRAPH '93}
}

@misc{newlands2022procedural,
      title={Procedural Generation and Rendering of Realistic, Navigable Forest Environments: An Open-Source Tool}, 
      author={Callum Newlands and Klaus-Peter Zauner},
      year={2022},
      eprint={2208.01471},
      archivePrefix={arXiv},
      primaryClass={cs.GR}
}

@inproceedings{Benes02ICCVG,
  title = {A stable modeling of large plant ecosystems},
  author = {Bene{\v{s}}, Bedrich},
  year = {2002},
  booktitle = {Proceedings of the International Conference on Computer Vision and Graphics},
  pages = {94--101},
  image = {Benes-2002-A_stable_modeling_of_large_plant_ecosystems-thumbnail.png},
  pdf = {Benes-2002-A_stable_modeling_of_large_plant_ecosystems.pdf}
}
     
@article{PerlinKen,
    author = {Perlin, Ken},
    title = {An image synthesizer},
    year = {1985},
    issue_date = {Jul. 1985},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {19},
    number = {3},
    issn = {0097-8930},
    url = {https://doi.org/10.1145/325165.325247},
    doi = {10.1145/325165.325247},
    abstract = {We introduce the concept of a Pixel Stream Editor. This forms the basis for an interactive synthesizer for designing highly realistic Computer Generated Imagery. The designer works in an interactive Very High Level programming environment which provides a very fast concept/implement/view iteration cycle.Naturalistic visual complexity is built up by composition of non-linear functions, as opposed to the more conventional texture mapping or growth model algorithms. Powerful primitives are included for creating controlled stochastic effects. We introduce the concept of "solid texture" to the field of CGI.We have used this system to create very convincing representations of clouds, fire, water, stars, marble, wood, rock, soap films and crystal. The algorithms created with this paradigm are generally extremely fast, highly realistic, and asynchronously parallelizable at the pixel level.},
    journal = {SIGGRAPH Comput. Graph.},
    month = {jul},
    pages = {287–296},
    numpages = {10},
    keywords = {waves, turbulence, stochastic modelling, space function, solid texture, pixel stream editor, interactive, functional composition, fire, algorithm development}
}

@ARTICLE{engines,
    author={A. Andrade},
    title={Game engines: a survey},
    journal={EAI Endorsed Transactions on Serious Games},
    volume={2},
    number={6},
    publisher={EAI},
    journal_a={SG},
    year={2015},
    month={11},
    keywords={animation, game engines, game design, serious games, physics, rendering.},
    doi={10.4108/eai.5-11-2015.150615}
}

@article{Perlin2002ImprovingN,
  title={Improving noise},
  author={Ken Perlin},
  journal={Proceedings of the 29th annual conference on Computer graphics and interactive techniques},
  year={2002},
  url={https://api.semanticscholar.org/CorpusID:207550606}
}

@article{10.1145/74334.74360,
author = {Lewis, J. P.},
title = {Algorithms for solid noise synthesis},
year = {1989},
issue_date = {July 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/74334.74360},
doi = {10.1145/74334.74360},
abstract = {A solid noise is a function that defines a random value at each point in space. Solid noises have immediate and powerful applications in surface texturing, stochastic modeling, and the animation of natural phenomena.Existing solid noise synthesis algorithms are surveyed and two new algorithms are presented. The first uses Wiener interpolation to interpolate random values on a discrete lattice. The second is an efficient sparse convolution algorithm. Both algorithms are developed for model-directed synthesis, in which sampling and construction of the noise occur only at points where the noise value is required, rather than over a regularly sampled region of space. The paper attempts to present the rationale for the selection of these particular algorithms.The new algorithms have advantages of efficiency, improved control over the noise power spectrum, and the absence of artifacts. The convolution algorithm additionally allows quality to be traded for efficiency without introducing obvious deterministic effects. The algorithms are particularly suitable for applications where high-quality solid noises are required. Several sample applications in stochastic modeling and solid texturing are shown.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {263–270},
numpages = {8}
}

@inproceedings{Lewis89,
author = {Lewis, J. P.},
title = {Algorithms for solid noise synthesis},
year = {1989},
isbn = {0897913124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/74333.74360},
doi = {10.1145/74333.74360},
abstract = {A solid noise is a function that defines a random value at each point in space. Solid noises have immediate and powerful applications in surface texturing, stochastic modeling, and the animation of natural phenomena.Existing solid noise synthesis algorithms are surveyed and two new algorithms are presented. The first uses Wiener interpolation to interpolate random values on a discrete lattice. The second is an efficient sparse convolution algorithm. Both algorithms are developed for model-directed synthesis, in which sampling and construction of the noise occur only at points where the noise value is required, rather than over a regularly sampled region of space. The paper attempts to present the rationale for the selection of these particular algorithms.The new algorithms have advantages of efficiency, improved control over the noise power spectrum, and the absence of artifacts. The convolution algorithm additionally allows quality to be traded for efficiency without introducing obvious deterministic effects. The algorithms are particularly suitable for applications where high-quality solid noises are required. Several sample applications in stochastic modeling and solid texturing are shown.},
booktitle = {Proceedings of the 16th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {263–270},
numpages = {8},
series = {SIGGRAPH '89}
}


@article{Cook05,
author = {Cook, Robert L. and DeRose, Tony},
title = {Wavelet noise},
year = {2005},
issue_date = {July 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1073204.1073264},
doi = {10.1145/1073204.1073264},
abstract = {Noise functions are an essential building block for writing procedural shaders in 3D computer graphics. The original noise function introduced by Ken Perlin is still the most popular because it is simple and fast, and many spectacular images have been made with it. Nevertheless, it is prone to problems with aliasing and detail loss. In this paper we analyze these problems and show that they are particularly severe when 3D noise is used to texture a 2D surface. We use the theory of wavelets to create a new class of simple and fast noise functions that avoid these problems.},
journal = {ACM Trans. Graph.},
month = {jul},
pages = {803–811},
numpages = {9},
keywords = {wavelets, texturing, texture synthesis, shading, rendering, procedural textures, noise, multiresolution analysis}
}

@article{Goldberg08,
author = {Goldberg, Alexander and Zwicker, Matthias and Durand, Fr\'{e}do},
title = {Anisotropic noise},
year = {2008},
issue_date = {August 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1360612.1360653},
doi = {10.1145/1360612.1360653},
abstract = {Programmable graphics hardware makes it possible to generate procedural noise textures on the fly for interactive rendering. However, filtering and antialiasing procedural noise involves a tradeoff between aliasing artifacts and loss of detail. In this paper we present a technique, targeted at interactive applications, that provides high-quality anisotropic filtering for noise textures. We generate noise tiles directly in the frequency domain by partitioning the frequency domain into oriented subbands. We then compute weighted sums of the subband textures to accurately approximate noise with a desired spectrum. This allows us to achieve high-quality anisotropic filtering. Our approach is based solely on 2D textures, avoiding the memory overhead of techniques based on 3D noise tiles. We devise a technique to compensate for texture distortions to generate uniform noise on arbitrary meshes. We develop a GPU-based implementation of our technique that achieves similar rendering performance as state-of-the-art algorithms for procedural noise. In addition, it provides anisotropic filtering and achieves superior image quality.},
journal = {ACM Trans. Graph.},
month = {aug},
pages = {1–8},
numpages = {8}
}

@inproceedings{Kensler2008,
  title={1 Better Gradient Noise},
  author={Andrew E. Kensler},
  year={2008},
  url={https://api.semanticscholar.org/CorpusID:15788995}
}

@article{Lagae09,
author = {Lagae, Ares and Lefebvre, Sylvain and Drettakis, George and Dutr\'{e}, Philip},
title = {Procedural noise using sparse Gabor convolution},
year = {2009},
issue_date = {August 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1531326.1531360},
doi = {10.1145/1531326.1531360},
abstract = {Noise is an essential tool for texturing and modeling. Designing interesting textures with noise calls for accurate spectral control, since noise is best described in terms of spectral content. Texturing requires that noise can be easily mapped to a surface, while high-quality rendering requires anisotropic filtering. A noise function that is procedural and fast to evaluate offers several additional advantages. Unfortunately, no existing noise combines all of these properties.In this paper we introduce a noise based on sparse convolution and the Gabor kernel that enables all of these properties. Our noise offers accurate spectral control with intuitive parameters such as orientation, principal frequency and bandwidth. Our noise supports two-dimensional and solid noise, but we also introduce setup-free surface noise. This is a method for mapping noise onto a surface, complementary to solid noise, that maintains the appearance of the noise pattern along the object and does not require a texture parameterization. Our approach requires only a few bytes of storage, does not use discretely sampled data, and is nonperiodic. It supports anisotropy and anisotropic filtering. We demonstrate our noise using an interactive tool for noise design.},
journal = {ACM Trans. Graph.},
month = {jul},
articleno = {54},
numpages = {10},
keywords = {shading, rendering, procedural texture, noise}
}

@article{Lagae10,
author = {Lagae, A. and Lefebvre, S. and Cook, R. and DeRose, T. and Drettakis, G. and Ebert, D.S. and Lewis, J.P. and Perlin, K. and Zwicker, M.},
title = {A Survey of Procedural Noise Functions},
journal = {Computer Graphics Forum},
volume = {29},
number = {8},
pages = {2579-2600},
doi = {https://doi.org/10.1111/j.1467-8659.2010.01827.x},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1467-8659.2010.01827.x},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1467-8659.2010.01827.x},
year = {2010}
}





